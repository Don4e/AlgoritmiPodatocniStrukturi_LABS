import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {

    // Each MapEntry object is a pair consisting of a key (a Comparable
    // object) and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry (K key, E val) {
        this.key = key;
        this.value = val;
    }

    public int compareTo (K that) {
        // Compare this map entry to that map entry.
        @SuppressWarnings("unchecked")
        MapEntry<K,E> other = (MapEntry<K,E>) that;
        return this.key.compareTo(other.key);
    }

    public String toString () {
        return "<" + key + "," + value + ">";
    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K,E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K,E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Napishete ja vie HASH FUNKCIJATA
        return Math.abs(key.hashCode())% buckets.length;
    }

    public SLLNode<MapEntry<K,E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is
        // equal
        // to targetKey. Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (targetKey.equals(((MapEntry<K, E>) curr.element).key))
                return curr;
        }
        return null;
    }

    public void insert(K key, E val) {		// Insert the entry <key, val> into this CBHT.
        MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (key.equals(((MapEntry<K, E>) curr.element).key)) {
                // Make newEntry replace the existing entry ...
                curr.element = newEntry;
                return;
            }
        }
        // Insert newEntry at the front of the 1WLL in bucket b ...
        buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b]; curr != null; pred = curr, curr = curr.succ) {
            if (key.equals(((MapEntry<K,E>) curr.element).key)) {
                if (pred == null)
                    buckets[b] = curr.succ;
                else
                    pred.succ = curr.succ;
                return;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            for (SLLNode<MapEntry<K,E>> curr = buckets[i]; curr != null; curr = curr.succ) {
                temp += curr.element.toString() + " ";
            }
            temp += "\n";
        }
        return temp;
    }

}
/*Даден ви е речник на зборови на кумановски дијалект и како тие се пишуваат на македонски јазик. Потоа даден ви е текст којшто
е напишан на кумановски дијалект. Потребно е да ги замените сите појавувања на зборовите на кумановскиот дијалект кои се дадени
 во речникот со соодветни зборови на македонски јазик.

Забелешка: Треба да се игнорираат интерпункциските знаци точка (.) , запирка (,), извичник(!) и прашалник (?). Исто така зборовите
во текстот можат да се појават и со прва голема буква и во тој случај неговиот синоним на македонски јазик исто така треба да се
отпечати со прва голема буква.


For example:

Input
20
nego otkolku
pesmu pesna
bija bil
u vo
s’s so
zhenu zhena
ubavu ubava
sakaja sakal
ednu edna
poznatu poznata
pesmu pesna
umreja umrel
sliku slika
zelje zelbi
rakiju rakija
ede jade
skup skap
chasku chaska
povishke povekje
narodnu narodna
Batko Gjorgjija e tipichna figura i karakter od Kumanovo, koj bija golem majtapdzija i boem i koj povishke sakaja kjef da tera nego da raboti. U ednu poznatu narodnu pesmu vika se deka umreja s’s tri zelje za ubavu zhenu, za chasku rakiju i za skup pajton.

Result
Batko Gjorgjija e tipichna figura i karakter od Kumanovo, koj bil golem majtapdzija i boem i koj povekje sakal kjef da tera otkolku da raboti. Vo edna poznata narodna pesna vika se deka umrel so tri zelbi za ubava zhena, za chaska rakija i za skap pajton*/

public class KumanovskiDijalekt {
    public static void main (String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(
                System.in));
        int N = Integer.parseInt(br.readLine());

        String rechnik[]=new String[N];
        for(int i=0;i<N;i++){
            rechnik[i]=br.readLine();
        }

        String tekst=br.readLine();

        //Vasiot kod tuka
        if(N==0){
            System.out.println(tekst);
            return;
        }
        CBHT<String, String> tabela=new CBHT<>(N*2);
        for(int i=0;i<N;i++){
            String[] split=rechnik[i].split(" ");
            tabela.insert(split[0], split[1]);
        }
        String rezultat="";                 //string kade kje go sostavume tekstot zbor po zbor
        String[] splitted=tekst.split(" "); //vo split gi imame site zborovi od tekstot posebno
        for(int i=0;i<splitted.length;i++){             //gi izminuvame site zborovi
            String zbor4e=splitted[i];                      //momentalniot zbor kje go stavime vo zbor za da go napravime so mali bukvi i da trgneme akio ima interpunkciski znak na kraj
            zbor4e=zbor4e.toLowerCase();
            char prvaBukva=splitted[i].charAt(0);
            char znak='^';                                      //znak kje ni sluzi kako indikator dali ima interpunkciski znak i go stavame da bide nekoj simbol koj go nema vo tekstot
            if(zbor4e.charAt(zbor4e.length()-1)=='.'||zbor4e.charAt(zbor4e.length()-1)==','||zbor4e.charAt(zbor4e.length()-1)=='?'||zbor4e.charAt(zbor4e.length()-1)=='!'){
                znak=zbor4e.charAt(zbor4e.length()-1);
                zbor4e=zbor4e.substring(0, zbor4e.length()-1);
//                System.out.println(znak);
            }
//            System.out.println(zbor4e);
            if(tabela.search(zbor4e)==null){                //ako go nema zborot direktno go pecatime kako sto e vo tekstot
                rezultat+=splitted[i];
                rezultat+=" ";
            }

            else {                                              //ako go ima zborot mu go dodavame znakot ako go ima na kraj i ako prvata bukva bila golema pak ja pravime da e golema
                zbor4e=tabela.search(zbor4e).element.value;
                if(Character.isUpperCase(prvaBukva)){
                    prvaBukva=zbor4e.charAt(0);
                    prvaBukva=Character.toUpperCase(prvaBukva);
                    rezultat+=prvaBukva;
                    rezultat+=zbor4e.substring(1, zbor4e.length());
                }
                else {
                    rezultat+=zbor4e;
                }
                if(znak!='^'){
                    rezultat+=znak;
                }
                rezultat+=" ";

            }
        }
        System.out.println(rezultat);
    }
}
